   1               		.file	"timer.c"
   2               	__SP_H__ = 0x3e
   3               	__SP_L__ = 0x3d
   4               	__SREG__ = 0x3f
   5               	__tmp_reg__ = 0
   6               	__zero_reg__ = 1
   7               		.text
   8               	.Ltext0:
   9               		.cfi_sections	.debug_frame
  10               	.global	TIMER0_init
  12               	TIMER0_init:
  13               	.LFB0:
  14               		.file 1 "../code/MCAL/TIMER/timer.c"
   1:../code/MCAL/TIMER/timer.c **** #include "../../UTALITIES/bit.h"	  /*included here to be not accessable to the uper layers*/
   2:../code/MCAL/TIMER/timer.c **** #include "../../UTALITIES/register.h" /*included here to be not accessable to the uper layers*/
   3:../code/MCAL/TIMER/timer.c **** #include "timer.h"
   4:../code/MCAL/TIMER/timer.c **** 
   5:../code/MCAL/TIMER/timer.c **** static void (*TIMER0_OVF_func)(void) = NULL; /*call back function of timer 0 overflow interrupt*/
   6:../code/MCAL/TIMER/timer.c **** static void (*TIMER0_OC_func)(void) = NULL;	 /*call back function of timer 0 output compare match i
   7:../code/MCAL/TIMER/timer.c **** 
   8:../code/MCAL/TIMER/timer.c **** /*from interrupt vectors table in the datasheet*/
   9:../code/MCAL/TIMER/timer.c **** void __vector_10(void) __attribute__((signal)); /*Timer/Counter0 Compare Match*/
  10:../code/MCAL/TIMER/timer.c **** void __vector_11(void) __attribute__((signal)); /*Timer/Counter0 Overflow*/
  11:../code/MCAL/TIMER/timer.c **** 
  12:../code/MCAL/TIMER/timer.c **** EN_timer0Error_t TIMER0_init(ST_timer0_t *ptr_timer0)
  13:../code/MCAL/TIMER/timer.c **** {
  15               		.loc 1 13 0
  16               		.cfi_startproc
  17               	.LVL0:
  18               	/* prologue: function */
  19               	/* frame size = 0 */
  20               	/* stack size = 0 */
  21               	.L__stack_usage = 0
  22 0000 FC01      		movw r30,r24
  23               	.LVL1:
  14:../code/MCAL/TIMER/timer.c **** 	EN_timer0Error_t ret = TIMER0_OK;
  15:../code/MCAL/TIMER/timer.c **** 
  16:../code/MCAL/TIMER/timer.c **** 	/*switch over the timer mode*/
  17:../code/MCAL/TIMER/timer.c **** 	switch (ptr_timer0->mode)
  24               		.loc 1 17 0
  25 0002 9081      		ld r25,Z
  26 0004 9130      		cpi r25,lo8(1)
  27 0006 01F0      		breq .L3
  28 0008 00F0      		brlo .L4
  29 000a 9230      		cpi r25,lo8(2)
  30 000c 01F0      		breq .L5
  31 000e 9330      		cpi r25,lo8(3)
  32 0010 01F4      		brne .L24
  18:../code/MCAL/TIMER/timer.c **** 	{
  19:../code/MCAL/TIMER/timer.c **** 	case TIMER0_NORMAL: /*WGM00 and WGM01 should be 0*/
  20:../code/MCAL/TIMER/timer.c **** 		CLR_BIT(TCCR0, WGM00);
  21:../code/MCAL/TIMER/timer.c **** 		CLR_BIT(TCCR0, WGM01);
  22:../code/MCAL/TIMER/timer.c **** 		break;
  23:../code/MCAL/TIMER/timer.c **** 	case TIMER0_PHASECORRECT: /*WGM00 should be 1, WGM01 should be 0, and FOC0 sould be 0*/
  24:../code/MCAL/TIMER/timer.c **** 		CLR_BIT(TCCR0, FOC0);
  25:../code/MCAL/TIMER/timer.c **** 		SET_BIT(TCCR0, WGM00);
  26:../code/MCAL/TIMER/timer.c **** 		CLR_BIT(TCCR0, WGM01);
  27:../code/MCAL/TIMER/timer.c **** 		break;
  28:../code/MCAL/TIMER/timer.c **** 	case TIMER0_CTC: /*WGM00 sould be 0 and WGM01 should be 1*/
  29:../code/MCAL/TIMER/timer.c **** 		CLR_BIT(TCCR0, WGM00);
  30:../code/MCAL/TIMER/timer.c **** 		SET_BIT(TCCR0, WGM01);
  31:../code/MCAL/TIMER/timer.c **** 		break;
  32:../code/MCAL/TIMER/timer.c **** 	case TIMER0_FAST_PWM: /*WGM00 should be 1, WGM01 should be 1, and FOC0 sould be 0*/
  33:../code/MCAL/TIMER/timer.c **** 		CLR_BIT(TCCR0, FOC0);
  33               		.loc 1 33 0
  34 0012 83B7      		in r24,0x33
  35               	.LVL2:
  36 0014 8F77      		andi r24,lo8(127)
  37 0016 83BF      		out 0x33,r24
  34:../code/MCAL/TIMER/timer.c **** 		SET_BIT(TCCR0, WGM00);
  38               		.loc 1 34 0
  39 0018 83B7      		in r24,0x33
  40 001a 8064      		ori r24,lo8(64)
  41 001c 00C0      		rjmp .L17
  42               	.LVL3:
  43               	.L4:
  20:../code/MCAL/TIMER/timer.c **** 		CLR_BIT(TCCR0, WGM01);
  44               		.loc 1 20 0
  45 001e 83B7      		in r24,0x33
  46               	.LVL4:
  47 0020 8F7B      		andi r24,lo8(-65)
  48 0022 00C0      		rjmp .L21
  49               	.LVL5:
  50               	.L3:
  24:../code/MCAL/TIMER/timer.c **** 		SET_BIT(TCCR0, WGM00);
  51               		.loc 1 24 0
  52 0024 83B7      		in r24,0x33
  53               	.LVL6:
  54 0026 8F77      		andi r24,lo8(127)
  55 0028 83BF      		out 0x33,r24
  25:../code/MCAL/TIMER/timer.c **** 		CLR_BIT(TCCR0, WGM01);
  56               		.loc 1 25 0
  57 002a 83B7      		in r24,0x33
  58 002c 8064      		ori r24,lo8(64)
  59               	.L21:
  60 002e 83BF      		out 0x33,r24
  26:../code/MCAL/TIMER/timer.c **** 		break;
  61               		.loc 1 26 0
  62 0030 83B7      		in r24,0x33
  63 0032 877F      		andi r24,lo8(-9)
  64 0034 00C0      		rjmp .L18
  65               	.LVL7:
  66               	.L5:
  29:../code/MCAL/TIMER/timer.c **** 		SET_BIT(TCCR0, WGM01);
  67               		.loc 1 29 0
  68 0036 83B7      		in r24,0x33
  69               	.LVL8:
  70 0038 8F7B      		andi r24,lo8(-65)
  71               	.L17:
  72               		.loc 1 34 0
  73 003a 83BF      		out 0x33,r24
  35:../code/MCAL/TIMER/timer.c **** 		SET_BIT(TCCR0, WGM01);
  74               		.loc 1 35 0
  75 003c 83B7      		in r24,0x33
  76 003e 8860      		ori r24,lo8(8)
  77               	.L18:
  78 0040 83BF      		out 0x33,r24
  14:../code/MCAL/TIMER/timer.c **** 
  79               		.loc 1 14 0
  80 0042 80E0      		ldi r24,0
  36:../code/MCAL/TIMER/timer.c **** 		break;
  81               		.loc 1 36 0
  82 0044 00C0      		rjmp .L2
  83               	.LVL9:
  84               	.L24:
  37:../code/MCAL/TIMER/timer.c **** 
  38:../code/MCAL/TIMER/timer.c **** 	default:
  39:../code/MCAL/TIMER/timer.c **** 		/*passed mode is wrong*/
  40:../code/MCAL/TIMER/timer.c **** 		ret = TIMER0_WRONG_MODE;
  85               		.loc 1 40 0
  86 0046 81E0      		ldi r24,lo8(1)
  87               	.LVL10:
  88               	.L2:
  41:../code/MCAL/TIMER/timer.c **** 		break;
  42:../code/MCAL/TIMER/timer.c **** 	}
  43:../code/MCAL/TIMER/timer.c **** 
  44:../code/MCAL/TIMER/timer.c **** 	/*switch over output compare mode*/
  45:../code/MCAL/TIMER/timer.c **** 	switch (ptr_timer0->ocMode)
  89               		.loc 1 45 0
  90 0048 9281      		ldd r25,Z+2
  91 004a 9130      		cpi r25,lo8(1)
  92 004c 01F0      		breq .L8
  93 004e 00F0      		brlo .L9
  94 0050 9230      		cpi r25,lo8(2)
  95 0052 01F0      		breq .L10
  96 0054 9330      		cpi r25,lo8(3)
  97 0056 01F4      		brne .L14
  46:../code/MCAL/TIMER/timer.c **** 	{
  47:../code/MCAL/TIMER/timer.c **** 	case OC0_DISCONNECTED: /*COM00 and COM01 should be 0*/
  48:../code/MCAL/TIMER/timer.c **** 		CLR_BIT(TCCR0, COM00);
  49:../code/MCAL/TIMER/timer.c **** 		CLR_BIT(TCCR0, COM01);
  50:../code/MCAL/TIMER/timer.c **** 		break;
  51:../code/MCAL/TIMER/timer.c **** 	case OC0_TOGGLE: /*COM00 sould be 1 and COM01 should be 0*/
  52:../code/MCAL/TIMER/timer.c **** 		if ((ptr_timer0->mode == TIMER0_NORMAL) || (ptr_timer0->mode == TIMER0_CTC))
  53:../code/MCAL/TIMER/timer.c **** 		{
  54:../code/MCAL/TIMER/timer.c **** 			SET_BIT(TCCR0, COM00);
  55:../code/MCAL/TIMER/timer.c **** 			CLR_BIT(TCCR0, COM01);
  56:../code/MCAL/TIMER/timer.c **** 		}
  57:../code/MCAL/TIMER/timer.c **** 		else /*if PWM mode these tow bits are reserved (this mode is not allowed for PWM modes)*/
  58:../code/MCAL/TIMER/timer.c **** 		{
  59:../code/MCAL/TIMER/timer.c **** 			ret = TIMER0_WRONG_OC_MODE;
  60:../code/MCAL/TIMER/timer.c **** 		}
  61:../code/MCAL/TIMER/timer.c **** 		break;
  62:../code/MCAL/TIMER/timer.c **** 	case OC0_NON_INVERTING: /*COM00 sould be 0 and COM01 should be 1*/
  63:../code/MCAL/TIMER/timer.c **** 		CLR_BIT(TCCR0, COM00);
  64:../code/MCAL/TIMER/timer.c **** 		SET_BIT(TCCR0, COM01);
  65:../code/MCAL/TIMER/timer.c **** 		break;
  66:../code/MCAL/TIMER/timer.c **** 	case OC0_INVERTING: /*COM00 and COM01 should be 1*/
  67:../code/MCAL/TIMER/timer.c **** 		SET_BIT(TCCR0, COM00);
  98               		.loc 1 67 0
  99 0058 93B7      		in r25,0x33
 100 005a 9061      		ori r25,lo8(16)
 101 005c 00C0      		rjmp .L20
 102               	.L9:
  48:../code/MCAL/TIMER/timer.c **** 		CLR_BIT(TCCR0, COM01);
 103               		.loc 1 48 0
 104 005e 93B7      		in r25,0x33
 105 0060 9F7E      		andi r25,lo8(-17)
 106 0062 00C0      		rjmp .L22
 107               	.L8:
  52:../code/MCAL/TIMER/timer.c **** 		{
 108               		.loc 1 52 0
 109 0064 9081      		ld r25,Z
 110 0066 9D7F      		andi r25,lo8(-3)
 111 0068 01F4      		brne .L14
  54:../code/MCAL/TIMER/timer.c **** 			CLR_BIT(TCCR0, COM01);
 112               		.loc 1 54 0
 113 006a 93B7      		in r25,0x33
 114 006c 9061      		ori r25,lo8(16)
 115               	.L22:
 116 006e 93BF      		out 0x33,r25
  55:../code/MCAL/TIMER/timer.c **** 		}
 117               		.loc 1 55 0
 118 0070 93B7      		in r25,0x33
 119 0072 9F7D      		andi r25,lo8(-33)
 120 0074 00C0      		rjmp .L19
 121               	.L10:
  63:../code/MCAL/TIMER/timer.c **** 		SET_BIT(TCCR0, COM01);
 122               		.loc 1 63 0
 123 0076 93B7      		in r25,0x33
 124 0078 9F7E      		andi r25,lo8(-17)
 125               	.L20:
 126               		.loc 1 67 0
 127 007a 93BF      		out 0x33,r25
  68:../code/MCAL/TIMER/timer.c **** 		SET_BIT(TCCR0, COM01);
 128               		.loc 1 68 0
 129 007c 93B7      		in r25,0x33
 130 007e 9062      		ori r25,lo8(32)
 131               	.L19:
 132 0080 93BF      		out 0x33,r25
  69:../code/MCAL/TIMER/timer.c **** 		break;
 133               		.loc 1 69 0
 134 0082 0895      		ret
 135               	.L14:
  59:../code/MCAL/TIMER/timer.c **** 		}
 136               		.loc 1 59 0
 137 0084 82E0      		ldi r24,lo8(2)
 138               	.LVL11:
  70:../code/MCAL/TIMER/timer.c **** 
  71:../code/MCAL/TIMER/timer.c **** 	default:
  72:../code/MCAL/TIMER/timer.c **** 		/*passed mode is wrong*/
  73:../code/MCAL/TIMER/timer.c **** 		ret = TIMER0_WRONG_OC_MODE;
  74:../code/MCAL/TIMER/timer.c **** 		break;
  75:../code/MCAL/TIMER/timer.c **** 	}
  76:../code/MCAL/TIMER/timer.c **** 
  77:../code/MCAL/TIMER/timer.c **** 	return ret;
  78:../code/MCAL/TIMER/timer.c **** }
 139               		.loc 1 78 0
 140 0086 0895      		ret
 141               		.cfi_endproc
 142               	.LFE0:
 144               	.global	TIMER0_start
 146               	TIMER0_start:
 147               	.LFB1:
  79:../code/MCAL/TIMER/timer.c **** 
  80:../code/MCAL/TIMER/timer.c **** void TIMER0_start(ST_timer0_t *ptr_timer0)
  81:../code/MCAL/TIMER/timer.c **** {
 148               		.loc 1 81 0
 149               		.cfi_startproc
 150               	.LVL12:
 151               	/* prologue: function */
 152               	/* frame size = 0 */
 153               	/* stack size = 0 */
 154               	.L__stack_usage = 0
  82:../code/MCAL/TIMER/timer.c **** 	/*depending on
  83:../code/MCAL/TIMER/timer.c **** 	 *TIMER0_STOP 		= 0b0000 0000 = 0,
  84:../code/MCAL/TIMER/timer.c **** 	 *TIMER0_1_PS 		= 0b0000 0001 = 1,
  85:../code/MCAL/TIMER/timer.c **** 	 *TIMER0_8_PS 		= 0b0000 0010 = 2,
  86:../code/MCAL/TIMER/timer.c **** 	 *TIMER0_64_PS 		= 0b0000 0011 = 3,
  87:../code/MCAL/TIMER/timer.c **** 	 *TIMER0_256_PS 	= 0b0000 0100 = 4,
  88:../code/MCAL/TIMER/timer.c **** 	 *TIMER0_1024_PS 	= 0b0000 0101 = 5,
  89:../code/MCAL/TIMER/timer.c **** 	 *EXTERNAL0_FALLING = 0b0000 0110 = 6,
  90:../code/MCAL/TIMER/timer.c **** 	 *EXTERNAL0_RISING 	= 0b0000 0111 = 7
  91:../code/MCAL/TIMER/timer.c **** 	 */
  92:../code/MCAL/TIMER/timer.c **** 	TCCR0 &= 0xF8; /*0b1111 1000*/
 155               		.loc 1 92 0
 156 0088 23B7      		in r18,0x33
 157 008a 287F      		andi r18,lo8(-8)
 158 008c 23BF      		out 0x33,r18
  93:../code/MCAL/TIMER/timer.c **** 	TCCR0 |= ptr_timer0->prescaler;
 159               		.loc 1 93 0
 160 008e 23B7      		in r18,0x33
 161 0090 FC01      		movw r30,r24
 162 0092 8181      		ldd r24,Z+1
 163               	.LVL13:
 164 0094 822B      		or r24,r18
 165 0096 83BF      		out 0x33,r24
 166 0098 0895      		ret
 167               		.cfi_endproc
 168               	.LFE1:
 170               	.global	TIMER0_stop
 172               	TIMER0_stop:
 173               	.LFB2:
  94:../code/MCAL/TIMER/timer.c **** 
  95:../code/MCAL/TIMER/timer.c **** 	/*timer starts when setting the prescaler with a value not 0 (setting a value to clock select bits
  96:../code/MCAL/TIMER/timer.c **** }
  97:../code/MCAL/TIMER/timer.c **** 
  98:../code/MCAL/TIMER/timer.c **** void TIMER0_stop(void)
  99:../code/MCAL/TIMER/timer.c **** {
 174               		.loc 1 99 0
 175               		.cfi_startproc
 176               	/* prologue: function */
 177               	/* frame size = 0 */
 178               	/* stack size = 0 */
 179               	.L__stack_usage = 0
 100:../code/MCAL/TIMER/timer.c **** 
 101:../code/MCAL/TIMER/timer.c **** 	/*timer0 stop when clearing the clock select bits*/
 102:../code/MCAL/TIMER/timer.c **** 	CLR_BIT(TCCR0, CS00);
 180               		.loc 1 102 0
 181 009a 83B7      		in r24,0x33
 182 009c 8E7F      		andi r24,lo8(-2)
 183 009e 83BF      		out 0x33,r24
 103:../code/MCAL/TIMER/timer.c **** 	CLR_BIT(TCCR0, CS01);
 184               		.loc 1 103 0
 185 00a0 83B7      		in r24,0x33
 186 00a2 8D7F      		andi r24,lo8(-3)
 187 00a4 83BF      		out 0x33,r24
 104:../code/MCAL/TIMER/timer.c **** 	CLR_BIT(TCCR0, CS02);
 188               		.loc 1 104 0
 189 00a6 83B7      		in r24,0x33
 190 00a8 8B7F      		andi r24,lo8(-5)
 191 00aa 83BF      		out 0x33,r24
 192 00ac 0895      		ret
 193               		.cfi_endproc
 194               	.LFE2:
 196               	.global	TIMER0_setTimerValue
 198               	TIMER0_setTimerValue:
 199               	.LFB3:
 105:../code/MCAL/TIMER/timer.c **** }
 106:../code/MCAL/TIMER/timer.c **** 
 107:../code/MCAL/TIMER/timer.c **** void TIMER0_setTimerValue(uint8_t value)
 108:../code/MCAL/TIMER/timer.c **** {
 200               		.loc 1 108 0
 201               		.cfi_startproc
 202               	.LVL14:
 203               	/* prologue: function */
 204               	/* frame size = 0 */
 205               	/* stack size = 0 */
 206               	.L__stack_usage = 0
 109:../code/MCAL/TIMER/timer.c **** 	/*setting the value of TCNT0 (timer counter register of timer 0) to the value of the user*/
 110:../code/MCAL/TIMER/timer.c **** 	TCNT0 = value;
 207               		.loc 1 110 0
 208 00ae 82BF      		out 0x32,r24
 209 00b0 0895      		ret
 210               		.cfi_endproc
 211               	.LFE3:
 213               	.global	TIMER0_getTimerValue
 215               	TIMER0_getTimerValue:
 216               	.LFB4:
 111:../code/MCAL/TIMER/timer.c **** }
 112:../code/MCAL/TIMER/timer.c **** 
 113:../code/MCAL/TIMER/timer.c **** void TIMER0_getTimerValue(uint8_t *pValue)
 114:../code/MCAL/TIMER/timer.c **** {
 217               		.loc 1 114 0
 218               		.cfi_startproc
 219               	.LVL15:
 220               	/* prologue: function */
 221               	/* frame size = 0 */
 222               	/* stack size = 0 */
 223               	.L__stack_usage = 0
 115:../code/MCAL/TIMER/timer.c **** 	/*fill the buffer of the user with the value of TCNT0 (timer counter register of timer 0)*/
 116:../code/MCAL/TIMER/timer.c **** 	*pValue = TCNT0;
 224               		.loc 1 116 0
 225 00b2 22B7      		in r18,0x32
 226 00b4 FC01      		movw r30,r24
 227 00b6 2083      		st Z,r18
 228 00b8 0895      		ret
 229               		.cfi_endproc
 230               	.LFE4:
 232               	.global	Timer0_setOutputCompareValue
 234               	Timer0_setOutputCompareValue:
 235               	.LFB5:
 117:../code/MCAL/TIMER/timer.c **** }
 118:../code/MCAL/TIMER/timer.c **** 
 119:../code/MCAL/TIMER/timer.c **** void Timer0_setOutputCompareValue(uint8_t value)
 120:../code/MCAL/TIMER/timer.c **** {
 236               		.loc 1 120 0
 237               		.cfi_startproc
 238               	.LVL16:
 239               	/* prologue: function */
 240               	/* frame size = 0 */
 241               	/* stack size = 0 */
 242               	.L__stack_usage = 0
 121:../code/MCAL/TIMER/timer.c **** 	/*setting the value of OCR0 (output compare register of timer 0) to the value of the user*/
 122:../code/MCAL/TIMER/timer.c **** 	OCR0 = value;
 243               		.loc 1 122 0
 244 00ba 8CBF      		out 0x3c,r24
 245 00bc 0895      		ret
 246               		.cfi_endproc
 247               	.LFE5:
 249               	.global	TIMER0_OVF_interruptEnable
 251               	TIMER0_OVF_interruptEnable:
 252               	.LFB6:
 123:../code/MCAL/TIMER/timer.c **** }
 124:../code/MCAL/TIMER/timer.c **** 
 125:../code/MCAL/TIMER/timer.c **** void TIMER0_OVF_interruptEnable(void)
 126:../code/MCAL/TIMER/timer.c **** {
 253               		.loc 1 126 0
 254               		.cfi_startproc
 255               	/* prologue: function */
 256               	/* frame size = 0 */
 257               	/* stack size = 0 */
 258               	.L__stack_usage = 0
 127:../code/MCAL/TIMER/timer.c **** 	/*enable the timer0 overflow interrupt by setting bit TOIE0 to 1*/
 128:../code/MCAL/TIMER/timer.c **** 	SET_BIT(TIMSK, TOIE0);
 259               		.loc 1 128 0
 260 00be 89B7      		in r24,0x39
 261 00c0 8160      		ori r24,lo8(1)
 262 00c2 89BF      		out 0x39,r24
 263 00c4 0895      		ret
 264               		.cfi_endproc
 265               	.LFE6:
 267               	.global	TIMER0_OVF_interruptDisable
 269               	TIMER0_OVF_interruptDisable:
 270               	.LFB7:
 129:../code/MCAL/TIMER/timer.c **** }
 130:../code/MCAL/TIMER/timer.c **** 
 131:../code/MCAL/TIMER/timer.c **** void TIMER0_OVF_interruptDisable(void)
 132:../code/MCAL/TIMER/timer.c **** {
 271               		.loc 1 132 0
 272               		.cfi_startproc
 273               	/* prologue: function */
 274               	/* frame size = 0 */
 275               	/* stack size = 0 */
 276               	.L__stack_usage = 0
 133:../code/MCAL/TIMER/timer.c **** 	/*disable the timer0 overflow interrupt by clearing bit TOIE0*/
 134:../code/MCAL/TIMER/timer.c **** 	CLR_BIT(TIMSK, TOIE0);
 277               		.loc 1 134 0
 278 00c6 89B7      		in r24,0x39
 279 00c8 8E7F      		andi r24,lo8(-2)
 280 00ca 89BF      		out 0x39,r24
 281 00cc 0895      		ret
 282               		.cfi_endproc
 283               	.LFE7:
 285               	.global	TIMER0_OC_interruptEnable
 287               	TIMER0_OC_interruptEnable:
 288               	.LFB8:
 135:../code/MCAL/TIMER/timer.c **** }
 136:../code/MCAL/TIMER/timer.c **** 
 137:../code/MCAL/TIMER/timer.c **** void TIMER0_OC_interruptEnable(void)
 138:../code/MCAL/TIMER/timer.c **** {
 289               		.loc 1 138 0
 290               		.cfi_startproc
 291               	/* prologue: function */
 292               	/* frame size = 0 */
 293               	/* stack size = 0 */
 294               	.L__stack_usage = 0
 139:../code/MCAL/TIMER/timer.c **** 	/*enable the timer0 output compare match interrupt by setting bit OCIE0 to 1*/
 140:../code/MCAL/TIMER/timer.c **** 	SET_BIT(TIMSK, OCIE0);
 295               		.loc 1 140 0
 296 00ce 89B7      		in r24,0x39
 297 00d0 8260      		ori r24,lo8(2)
 298 00d2 89BF      		out 0x39,r24
 299 00d4 0895      		ret
 300               		.cfi_endproc
 301               	.LFE8:
 303               	.global	TIMER0_OC_interruptDisable
 305               	TIMER0_OC_interruptDisable:
 306               	.LFB9:
 141:../code/MCAL/TIMER/timer.c **** }
 142:../code/MCAL/TIMER/timer.c **** 
 143:../code/MCAL/TIMER/timer.c **** void TIMER0_OC_interruptDisable(void)
 144:../code/MCAL/TIMER/timer.c **** {
 307               		.loc 1 144 0
 308               		.cfi_startproc
 309               	/* prologue: function */
 310               	/* frame size = 0 */
 311               	/* stack size = 0 */
 312               	.L__stack_usage = 0
 145:../code/MCAL/TIMER/timer.c **** 	/*disable the timer0 output compare match interrupt by clearing bit OCIE0*/
 146:../code/MCAL/TIMER/timer.c **** 	CLR_BIT(TIMSK, OCIE0);
 313               		.loc 1 146 0
 314 00d6 89B7      		in r24,0x39
 315 00d8 8D7F      		andi r24,lo8(-3)
 316 00da 89BF      		out 0x39,r24
 317 00dc 0895      		ret
 318               		.cfi_endproc
 319               	.LFE9:
 321               	.global	__vector_10
 323               	__vector_10:
 324               	.LFB10:
 147:../code/MCAL/TIMER/timer.c **** }
 148:../code/MCAL/TIMER/timer.c **** 
 149:../code/MCAL/TIMER/timer.c **** void __vector_10(void)
 150:../code/MCAL/TIMER/timer.c **** {
 325               		.loc 1 150 0
 326               		.cfi_startproc
 327 00de 1F92      		push r1
 328               	.LCFI0:
 329               		.cfi_def_cfa_offset 3
 330               		.cfi_offset 1, -2
 331 00e0 0F92      		push r0
 332               	.LCFI1:
 333               		.cfi_def_cfa_offset 4
 334               		.cfi_offset 0, -3
 335 00e2 0FB6      		in r0,__SREG__
 336 00e4 0F92      		push r0
 337 00e6 1124      		clr __zero_reg__
 338 00e8 2F93      		push r18
 339               	.LCFI2:
 340               		.cfi_def_cfa_offset 5
 341               		.cfi_offset 18, -4
 342 00ea 3F93      		push r19
 343               	.LCFI3:
 344               		.cfi_def_cfa_offset 6
 345               		.cfi_offset 19, -5
 346 00ec 4F93      		push r20
 347               	.LCFI4:
 348               		.cfi_def_cfa_offset 7
 349               		.cfi_offset 20, -6
 350 00ee 5F93      		push r21
 351               	.LCFI5:
 352               		.cfi_def_cfa_offset 8
 353               		.cfi_offset 21, -7
 354 00f0 6F93      		push r22
 355               	.LCFI6:
 356               		.cfi_def_cfa_offset 9
 357               		.cfi_offset 22, -8
 358 00f2 7F93      		push r23
 359               	.LCFI7:
 360               		.cfi_def_cfa_offset 10
 361               		.cfi_offset 23, -9
 362 00f4 8F93      		push r24
 363               	.LCFI8:
 364               		.cfi_def_cfa_offset 11
 365               		.cfi_offset 24, -10
 366 00f6 9F93      		push r25
 367               	.LCFI9:
 368               		.cfi_def_cfa_offset 12
 369               		.cfi_offset 25, -11
 370 00f8 AF93      		push r26
 371               	.LCFI10:
 372               		.cfi_def_cfa_offset 13
 373               		.cfi_offset 26, -12
 374 00fa BF93      		push r27
 375               	.LCFI11:
 376               		.cfi_def_cfa_offset 14
 377               		.cfi_offset 27, -13
 378 00fc EF93      		push r30
 379               	.LCFI12:
 380               		.cfi_def_cfa_offset 15
 381               		.cfi_offset 30, -14
 382 00fe FF93      		push r31
 383               	.LCFI13:
 384               		.cfi_def_cfa_offset 16
 385               		.cfi_offset 31, -15
 386               	/* prologue: Signal */
 387               	/* frame size = 0 */
 388               	/* stack size = 15 */
 389               	.L__stack_usage = 15
 151:../code/MCAL/TIMER/timer.c **** 	/*called when OCF0 is set to one*/
 152:../code/MCAL/TIMER/timer.c **** 	if (TIMER0_OC_func != NULL)
 390               		.loc 1 152 0
 391 0100 E091 0000 		lds r30,TIMER0_OC_func
 392 0104 F091 0000 		lds r31,TIMER0_OC_func+1
 393 0108 3097      		sbiw r30,0
 394 010a 01F0      		breq .L34
 153:../code/MCAL/TIMER/timer.c **** 		TIMER0_OC_func();
 395               		.loc 1 153 0
 396 010c 0995      		icall
 397               	.LVL17:
 398               	.L34:
 399               	/* epilogue start */
 154:../code/MCAL/TIMER/timer.c **** }
 400               		.loc 1 154 0
 401 010e FF91      		pop r31
 402 0110 EF91      		pop r30
 403 0112 BF91      		pop r27
 404 0114 AF91      		pop r26
 405 0116 9F91      		pop r25
 406 0118 8F91      		pop r24
 407 011a 7F91      		pop r23
 408 011c 6F91      		pop r22
 409 011e 5F91      		pop r21
 410 0120 4F91      		pop r20
 411 0122 3F91      		pop r19
 412 0124 2F91      		pop r18
 413 0126 0F90      		pop r0
 414 0128 0FBE      		out __SREG__,r0
 415 012a 0F90      		pop r0
 416 012c 1F90      		pop r1
 417 012e 1895      		reti
 418               		.cfi_endproc
 419               	.LFE10:
 421               	.global	__vector_11
 423               	__vector_11:
 424               	.LFB11:
 155:../code/MCAL/TIMER/timer.c **** 
 156:../code/MCAL/TIMER/timer.c **** void __vector_11(void)
 157:../code/MCAL/TIMER/timer.c **** {
 425               		.loc 1 157 0
 426               		.cfi_startproc
 427 0130 1F92      		push r1
 428               	.LCFI14:
 429               		.cfi_def_cfa_offset 3
 430               		.cfi_offset 1, -2
 431 0132 0F92      		push r0
 432               	.LCFI15:
 433               		.cfi_def_cfa_offset 4
 434               		.cfi_offset 0, -3
 435 0134 0FB6      		in r0,__SREG__
 436 0136 0F92      		push r0
 437 0138 1124      		clr __zero_reg__
 438 013a 2F93      		push r18
 439               	.LCFI16:
 440               		.cfi_def_cfa_offset 5
 441               		.cfi_offset 18, -4
 442 013c 3F93      		push r19
 443               	.LCFI17:
 444               		.cfi_def_cfa_offset 6
 445               		.cfi_offset 19, -5
 446 013e 4F93      		push r20
 447               	.LCFI18:
 448               		.cfi_def_cfa_offset 7
 449               		.cfi_offset 20, -6
 450 0140 5F93      		push r21
 451               	.LCFI19:
 452               		.cfi_def_cfa_offset 8
 453               		.cfi_offset 21, -7
 454 0142 6F93      		push r22
 455               	.LCFI20:
 456               		.cfi_def_cfa_offset 9
 457               		.cfi_offset 22, -8
 458 0144 7F93      		push r23
 459               	.LCFI21:
 460               		.cfi_def_cfa_offset 10
 461               		.cfi_offset 23, -9
 462 0146 8F93      		push r24
 463               	.LCFI22:
 464               		.cfi_def_cfa_offset 11
 465               		.cfi_offset 24, -10
 466 0148 9F93      		push r25
 467               	.LCFI23:
 468               		.cfi_def_cfa_offset 12
 469               		.cfi_offset 25, -11
 470 014a AF93      		push r26
 471               	.LCFI24:
 472               		.cfi_def_cfa_offset 13
 473               		.cfi_offset 26, -12
 474 014c BF93      		push r27
 475               	.LCFI25:
 476               		.cfi_def_cfa_offset 14
 477               		.cfi_offset 27, -13
 478 014e EF93      		push r30
 479               	.LCFI26:
 480               		.cfi_def_cfa_offset 15
 481               		.cfi_offset 30, -14
 482 0150 FF93      		push r31
 483               	.LCFI27:
 484               		.cfi_def_cfa_offset 16
 485               		.cfi_offset 31, -15
 486               	/* prologue: Signal */
 487               	/* frame size = 0 */
 488               	/* stack size = 15 */
 489               	.L__stack_usage = 15
 158:../code/MCAL/TIMER/timer.c **** 	/*called when TOV0 is set to one*/
 159:../code/MCAL/TIMER/timer.c **** 	if (TIMER0_OVF_func != NULL)
 490               		.loc 1 159 0
 491 0152 E091 0000 		lds r30,TIMER0_OVF_func
 492 0156 F091 0000 		lds r31,TIMER0_OVF_func+1
 493 015a 3097      		sbiw r30,0
 494 015c 01F0      		breq .L39
 160:../code/MCAL/TIMER/timer.c **** 		TIMER0_OVF_func();
 495               		.loc 1 160 0
 496 015e 0995      		icall
 497               	.LVL18:
 498               	.L39:
 499               	/* epilogue start */
 161:../code/MCAL/TIMER/timer.c **** }
 500               		.loc 1 161 0
 501 0160 FF91      		pop r31
 502 0162 EF91      		pop r30
 503 0164 BF91      		pop r27
 504 0166 AF91      		pop r26
 505 0168 9F91      		pop r25
 506 016a 8F91      		pop r24
 507 016c 7F91      		pop r23
 508 016e 6F91      		pop r22
 509 0170 5F91      		pop r21
 510 0172 4F91      		pop r20
 511 0174 3F91      		pop r19
 512 0176 2F91      		pop r18
 513 0178 0F90      		pop r0
 514 017a 0FBE      		out __SREG__,r0
 515 017c 0F90      		pop r0
 516 017e 1F90      		pop r1
 517 0180 1895      		reti
 518               		.cfi_endproc
 519               	.LFE11:
 521               	.global	TIMER0_OVF_setCallBackFunction
 523               	TIMER0_OVF_setCallBackFunction:
 524               	.LFB12:
 162:../code/MCAL/TIMER/timer.c **** 
 163:../code/MCAL/TIMER/timer.c **** void TIMER0_OVF_setCallBackFunction(void (*ptr_callBackFunction)(void))
 164:../code/MCAL/TIMER/timer.c **** {
 525               		.loc 1 164 0
 526               		.cfi_startproc
 527               	.LVL19:
 528               	/* prologue: function */
 529               	/* frame size = 0 */
 530               	/* stack size = 0 */
 531               	.L__stack_usage = 0
 165:../code/MCAL/TIMER/timer.c **** 	/*setting the call back function with the user function*/
 166:../code/MCAL/TIMER/timer.c **** 	TIMER0_OVF_func = ptr_callBackFunction;
 532               		.loc 1 166 0
 533 0182 9093 0000 		sts TIMER0_OVF_func+1,r25
 534 0186 8093 0000 		sts TIMER0_OVF_func,r24
 535 018a 0895      		ret
 536               		.cfi_endproc
 537               	.LFE12:
 539               	.global	TIMER0_OC_setCallBackFunction
 541               	TIMER0_OC_setCallBackFunction:
 542               	.LFB13:
 167:../code/MCAL/TIMER/timer.c **** }
 168:../code/MCAL/TIMER/timer.c **** 
 169:../code/MCAL/TIMER/timer.c **** void TIMER0_OC_setCallBackFunction(void (*ptr_callBackFunction)(void))
 170:../code/MCAL/TIMER/timer.c **** {
 543               		.loc 1 170 0
 544               		.cfi_startproc
 545               	.LVL20:
 546               	/* prologue: function */
 547               	/* frame size = 0 */
 548               	/* stack size = 0 */
 549               	.L__stack_usage = 0
 171:../code/MCAL/TIMER/timer.c **** 	/*setting the call back function with the user function*/
 172:../code/MCAL/TIMER/timer.c **** 	TIMER0_OC_func = ptr_callBackFunction;
 550               		.loc 1 172 0
 551 018c 9093 0000 		sts TIMER0_OC_func+1,r25
 552 0190 8093 0000 		sts TIMER0_OC_func,r24
 553 0194 0895      		ret
 554               		.cfi_endproc
 555               	.LFE13:
 557               		.local	TIMER0_OC_func
 558               		.comm	TIMER0_OC_func,2,1
 559               		.local	TIMER0_OVF_func
 560               		.comm	TIMER0_OVF_func,2,1
 561               	.Letext0:
 562               		.file 2 "../code/MCAL/TIMER/../../UTALITIES/types.h"
 563               		.file 3 "../code/MCAL/TIMER/timer.h"
DEFINED SYMBOLS
                            *ABS*:0000000000000000 timer.c
     /tmp/ccVdVcd7.s:2      *ABS*:000000000000003e __SP_H__
     /tmp/ccVdVcd7.s:3      *ABS*:000000000000003d __SP_L__
     /tmp/ccVdVcd7.s:4      *ABS*:000000000000003f __SREG__
     /tmp/ccVdVcd7.s:5      *ABS*:0000000000000000 __tmp_reg__
     /tmp/ccVdVcd7.s:6      *ABS*:0000000000000001 __zero_reg__
     /tmp/ccVdVcd7.s:12     .text:0000000000000000 TIMER0_init
     /tmp/ccVdVcd7.s:146    .text:0000000000000088 TIMER0_start
     /tmp/ccVdVcd7.s:172    .text:000000000000009a TIMER0_stop
     /tmp/ccVdVcd7.s:198    .text:00000000000000ae TIMER0_setTimerValue
     /tmp/ccVdVcd7.s:215    .text:00000000000000b2 TIMER0_getTimerValue
     /tmp/ccVdVcd7.s:234    .text:00000000000000ba Timer0_setOutputCompareValue
     /tmp/ccVdVcd7.s:251    .text:00000000000000be TIMER0_OVF_interruptEnable
     /tmp/ccVdVcd7.s:269    .text:00000000000000c6 TIMER0_OVF_interruptDisable
     /tmp/ccVdVcd7.s:287    .text:00000000000000ce TIMER0_OC_interruptEnable
     /tmp/ccVdVcd7.s:305    .text:00000000000000d6 TIMER0_OC_interruptDisable
     /tmp/ccVdVcd7.s:323    .text:00000000000000de __vector_10
                             .bss:0000000000000000 TIMER0_OC_func
     /tmp/ccVdVcd7.s:423    .text:0000000000000130 __vector_11
     /tmp/ccVdVcd7.s:558    .bss:0000000000000002 TIMER0_OVF_func
     /tmp/ccVdVcd7.s:523    .text:0000000000000182 TIMER0_OVF_setCallBackFunction
     /tmp/ccVdVcd7.s:541    .text:000000000000018c TIMER0_OC_setCallBackFunction

UNDEFINED SYMBOLS
__do_clear_bss
